{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","winMessage","setWinMessage","isCross","setIsCross","changeItem","itemNumber","toast","type","isEmpty","i","length","checkIsWinner","Container","position","Row","Button","color","block","onClick","Col","md","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAgBeA,EAbF,SAAC,GACV,OADqB,EAAVC,MAGP,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCD9BC,EAAY,IAAIC,MAAM,GAAGC,KAAK,SA0HrBC,EAvHH,WAGV,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAiEMC,EAAa,SAACC,GAElB,OAAGL,EAEMM,YAAMN,EAAY,CAACO,KAAM,YAEL,SAAzBZ,EAAUU,GAOLC,YAAM,kBAAmB,CAACC,KAAO,aALxCZ,EAAUU,GAAcH,EAAW,QAAY,SAC/CC,GAAYD,QAlEM,WAGpB,IADA,IAAIM,GAAU,EACLC,EAAI,EAAGA,EAAId,EAAUe,OAAQD,IAEpC,GAAoB,SAAhBd,EAAUc,GACd,CACED,GAAU,EACV,MAGAA,GAGFP,EAAc,cAGbN,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEZA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAoB,SAAdA,EAAU,IAE3EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAEXA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAMA,EAAU,IAAsB,SAAhBA,EAAU,IAE5EM,EAAc,GAAD,OAAIN,EAAU,GAAd,SAsBfgB,KAGF,OACE,eAACC,EAAA,EAAD,CAAWlB,UAAU,MAArB,UACC,cAAC,IAAD,CAAgBmB,SAAW,iBAC1B,eAACC,EAAA,EAAD,WACGd,EACC,gCACI,oBAAIN,UAAU,8BAAd,SAA6CM,IAC/C,cAACe,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACvB,UAAU,YAAYwB,QAzF/C,WACbf,GAAW,GACXF,EAAc,IACdN,EAAUE,KAAK,QAAS,EAAG,IAsFnB,gCAKA,qBAAIH,UAAU,gBAAd,UAAgCQ,EAAW,QAAY,SAAvD,WAEJ,cAACiB,EAAA,EAAD,CAAKC,GAAI,EAAG1B,UAAU,cAAtB,SACE,qBAAKA,UAAU,OAAf,SAEIC,EAAU0B,KAAI,SAACC,EAAMC,GAAP,OACZ,cAACC,EAAA,EAAD,CAAMR,MAAQ,UAAUE,QAAS,kBAAMd,EAAWmB,IAAlD,SACE,cAACE,EAAA,EAAD,CAAU/B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAM6B,sBC7GjBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f9fdf6b.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FaPen, FaTimes, FaRegCircle} from \"react-icons/fa\"\r\n\r\nconst Icon = ({name}) => {\r\n    switch (name)\r\n    {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icon\" />\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\" />\r\n        default:\r\n            return <FaPen className=\"icon\" />\r\n        \r\n    }\r\n}\r\n\r\nexport default Icon; \r\n","import React, { useState } from \"react\"; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Icon from './components/Icon';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Row, Col, Button, Container, Card, CardBody} from \"reactstrap\"\n\nconst itemArray = new Array(9).fill(\"empty\");\n\n\nconst App = () => {\n\n\n  const [winMessage, setWinMessage] = useState(\"\");\n  const [isCross, setIsCross] = useState(false);\n  \n  const reload = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9); \n  }\n\n  const checkIsWinner = () => {\n    \n    var isEmpty = false; \n    for (let i = 0; i < itemArray.length; i++)\n    {\n      if (itemArray[i] == \"empty\")\n      {\n        isEmpty = true; \n        break; \n      }\n    }\n    if(!isEmpty)\n    {\n      // return toast(\"GAME OVER, NO ONE WINS\", {type: error})\n      setWinMessage(\"game over!\"); \n    }\n\n    if(itemArray[0] == itemArray[1] && itemArray[0] == itemArray[2] && itemArray[0]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[0]} WON`);  \n    }\n    if(itemArray[3] == itemArray[4] && itemArray[3] == itemArray[5] && itemArray[3]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[3]} WON`);  \n    }\n    if(itemArray[6] == itemArray[7] && itemArray[6] == itemArray[8] && itemArray[6]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[6]} WON`);  \n    }\n    if(itemArray[0] == itemArray[3] && itemArray[0] == itemArray[6] && itemArray[0]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[0]} WON`);  \n    }\n    if(itemArray[0] == itemArray[1] && itemArray[0] == itemArray[2] && itemArray[0]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[0]} WON`);  \n    }\n    if(itemArray[1] == itemArray[4] && itemArray[1] == itemArray[7] && itemArray[1]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[1]} WON`);  \n    }\n    if(itemArray[2] == itemArray[5] && itemArray[2] == itemArray[8] && itemArray[2]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[2]} WON`);  \n    }\n    if(itemArray[0] == itemArray[4] && itemArray[0] == itemArray[8] && itemArray[0]!=\"empty\")\n    {\n      setWinMessage(`${itemArray[0]} WON`);  \n    }\n    if (itemArray[2] == itemArray[4] && itemArray[2] == itemArray[6] && itemArray[2] != \"empty\")\n    {\n      setWinMessage(`${itemArray[2]} WON`);  \n    }\n  }\n\n\n\n  const changeItem = (itemNumber) => {\n\n    if(winMessage)\n    {\n      return toast(winMessage, {type: \"warning\"})\n    }\n    if (itemArray[itemNumber] == \"empty\")\n    {\n      itemArray[itemNumber] = isCross ? (\"cross\") : (\"circle\");\n      setIsCross(!isCross); \n    }\n    else\n    {\n      return toast(\"Already Filled \", {type : \"success\"}) \n    }\n\n    checkIsWinner(); \n  }\n\n  return (\n    <Container className=\"p-5\">\n     <ToastContainer position = \"bottom-right\" />\n      <Row>\n        {winMessage ? (\n          <div>\n              <h1 className=\"text-uppercase text-success\">{winMessage}</h1>\n            <Button color=\"success\" block className=\"mb-3 mt-2\" onClick={reload}>RELOAD THE GAME</Button>\n          </div>\n        )\n        :\n        (\n            <h1 className='text-warning '>{ isCross ? (\"CROSS\") : (\"CIRCLE\")} TURN</h1>\n        ) }\n        <Col md={6} className=\"offset-md-3\">\n          <div className=\"grid\">\n            {\n              itemArray.map((item, index) => (\n                <Card color = \"warning\" onClick={() => changeItem(index)}>\n                  <CardBody className=\"box\">\n                    <Icon name={item}/>\n                  </CardBody>\n                </Card>\n              ))\n            }\n          </div>\n        </Col>\n     </Row>\n    </Container>\n  );\n}\nexport default App;\n// offset-md-3 centres the column\n// md = 6 implies the width of each cell","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}